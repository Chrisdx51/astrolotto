import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:share_plus/share_plus.dart';

import 'main.dart'; // BannerAdWidget

// üé® Colors to match your theme
const _cTurquoise = Color(0xFF12D1C0);
const _cMagenta = Color(0xFFFF4D9A);
const _cSunshine = Color(0xFFFFD166);
const _cDeepBlue = Color(0xFF0A003D);

class SavedDrawsScreen extends StatefulWidget {
  const SavedDrawsScreen({super.key});

  @override
  State<SavedDrawsScreen> createState() => _SavedDrawsScreenState();
}

class _SavedDrawsScreenState extends State<SavedDrawsScreen> {
  List<Map<String, dynamic>> _items = [];
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    setState(() => _loading = true);
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getStringList('saved_draws') ?? [];
    final decoded = <Map<String, dynamic>>[];
    for (final s in raw) {
      try {
        decoded.add(jsonDecode(s) as Map<String, dynamic>);
      } catch (_) {}
    }
    // newest first
    decoded.sort((a, b) {
      final ta = DateTime.tryParse(a['timestamp'] ?? '') ?? DateTime(2000);
      final tb = DateTime.tryParse(b['timestamp'] ?? '') ?? DateTime(2000);
      return tb.compareTo(ta);
    });
    setState(() {
      _items = decoded;
      _loading = false;
    });
  }

  Future<void> _deleteAt(int index) async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getStringList('saved_draws') ?? [];
    if (index < 0 || index >= _items.length) return;

    // find matching json in raw and remove first match
    final target = jsonEncode(_items[index]);
    final i = raw.indexOf(target);
    if (i != -1) {
      raw.removeAt(i);
      await prefs.setStringList('saved_draws', raw);
    }
    await _load();
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Removed from saved draws')),
      );
    }
  }

  Future<void> _clearAll() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('saved_draws', []);
    await _load();
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('All saved draws cleared')),
      );
    }
  }

  void _share(Map<String, dynamic> item) {
    final main = (item['mainNumbers'] as List).join(', ');
    final bonusList = (item['bonusNumbers'] as List);
    final bonus = bonusList.isNotEmpty ? " Bonus: ${bonusList.join(', ')}" : "";
    final text = '''
üîÆ ${item['name']}'s ${item['lottery']} Lucky Numbers

Main: $main$bonus

Zodiac: ${item['zodiac']}
Moon: ${item['moonPhase']}
Country: ${item['country']}

‚ú® Generated by Astro Lotto Luck ‚ú®
''';
    Share.share(text, subject: 'My saved Astro Numbers');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: _cDeepBlue,
      body: SafeArea(
        child: Column(
          children: [
            const BannerAdWidget(isTop: true),
            // header
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 12, 16, 8),
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back, color: Colors.white),
                    onPressed: () => Navigator.pop(context),
                  ),
                  Expanded(
                    child: Text(
                      'My Saved Draws',
                      textAlign: TextAlign.center,
                      style: GoogleFonts.luckiestGuy(
                        color: _cSunshine,
                        fontSize: 24,
                        shadows: const [Shadow(color: Colors.black54, blurRadius: 6)],
                      ),
                    ),
                  ),
                  IconButton(
                    tooltip: 'Clear all',
                    icon: const Icon(Icons.delete_sweep, color: Colors.white),
                    onPressed: _items.isEmpty
                        ? null
                        : () async {
                      final ok = await showDialog<bool>(
                        context: context,
                        builder: (_) => AlertDialog(
                          backgroundColor: _cDeepBlue,
                          title: const Text('Clear all saved draws?',
                              style: TextStyle(color: Colors.white)),
                          content: const Text(
                            'This will delete all saved entries.',
                            style: TextStyle(color: Colors.white70),
                          ),
                          actions: [
                            TextButton(
                              child: const Text('Cancel',
                                  style: TextStyle(color: Colors.white70)),
                              onPressed: () => Navigator.pop(context, false),
                            ),
                            ElevatedButton(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: _cSunshine,
                                foregroundColor: Colors.black,
                              ),
                              onPressed: () => Navigator.pop(context, true),
                              child: const Text('Clear all'),
                            ),
                          ],
                        ),
                      );
                      if (ok == true) _clearAll();
                    },
                  ),
                ],
              ),
            ),

            Expanded(
              child: _loading
                  ? const Center(
                child: CircularProgressIndicator(color: Colors.white),
              )
                  : _items.isEmpty
                  ? const _EmptyState()
                  : RefreshIndicator(
                onRefresh: _load,
                color: Colors.white,
                backgroundColor: _cMagenta,
                child: ListView.separated(
                  physics: const AlwaysScrollableScrollPhysics(),
                  padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
                  itemCount: _items.length,
                  separatorBuilder: (_, __) => const SizedBox(height: 12),
                  itemBuilder: (context, index) {
                    final item = _items[index];
                    return _SavedCard(
                      item: item,
                      onShare: () => _share(item),
                      onDelete: () => _deleteAt(index),
                    );
                  },
                ),
              ),
            ),
            const BannerAdWidget(),
          ],
        ),
      ),
    );
  }
}

class _EmptyState extends StatelessWidget {
  const _EmptyState();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('No saved draws yet',
                style: GoogleFonts.quicksand(
                    color: Colors.white, fontSize: 18, fontWeight: FontWeight.w700)),
            const SizedBox(height: 8),
            const Text(
              'Save your lucky numbers from the results screen and they will appear here ‚ú®',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.white70),
            ),
          ],
        ),
      ),
    );
  }
}

class _SavedCard extends StatelessWidget {
  final Map<String, dynamic> item;
  final VoidCallback onShare;
  final VoidCallback onDelete;

  const _SavedCard({
    required this.item,
    required this.onShare,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    final dt = DateTime.tryParse(item['timestamp'] ?? '');
    final dateStr =
    dt != null ? '${dt.day}/${dt.month}/${dt.year} ‚Ä¢ ${dt.hour.toString().padLeft(2, '0')}:${dt.minute.toString().padLeft(2, '0')}' : '';
    final main = (item['mainNumbers'] as List).join('  ');
    final bonusList = (item['bonusNumbers'] as List);
    final bonus = bonusList.isNotEmpty ? ' | Bonus: ${bonusList.join('  ')}' : '';

    return Container(
      padding: const EdgeInsets.all(14),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [_cTurquoise, _cMagenta],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: const [BoxShadow(color: Colors.black38, blurRadius: 8)],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Top row: Lottery + date
          Row(
            children: [
              Expanded(
                child: Text(
                  item['lottery'] ?? '',
                  style: GoogleFonts.luckiestGuy(
                    color: _cSunshine,
                    fontSize: 18,
                    shadows: const [Shadow(color: Colors.black54, blurRadius: 6)],
                  ),
                ),
              ),
              Text(dateStr, style: const TextStyle(color: Colors.white70, fontSize: 12)),
            ],
          ),
          const SizedBox(height: 8),
          // Name + country
          Text(
            'üë§ ${item['name']}  ‚Ä¢  üåç ${item['country']}',
            style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: 6),
          // Zodiac + moon
          Text(
            '‚ôà ${item['zodiac']}  ‚Ä¢  üåï ${item['moonPhase']}',
            style: const TextStyle(color: Colors.white, height: 1.3),
          ),
          const SizedBox(height: 10),
          // Numbers row
          Text(
            'üé± Numbers:  $main$bonus',
            style: const TextStyle(color: Colors.white, fontSize: 15, height: 1.4),
          ),
          const SizedBox(height: 12),
          // Actions
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: onShare,
                icon: const Icon(Icons.share, color: Colors.white),
                label: const Text('Share', style: TextStyle(color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.pinkAccent.withOpacity(0.35),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                ),
              ),
              const SizedBox(width: 10),
              ElevatedButton.icon(
                onPressed: onDelete,
                icon: const Icon(Icons.delete, color: Colors.white),
                label: const Text('Delete', style: TextStyle(color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.redAccent.withOpacity(0.35),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
